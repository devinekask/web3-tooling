"use strict";(self.webpackChunktooling=self.webpackChunktooling||[]).push([[213],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},g=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),g=r,h=u["".concat(c,".").concat(g)]||u[g]||d[g]||a;return n?o.createElement(h,i(i({ref:t},p),{},{components:n})):o.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5867:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const a={},i="Merge conflicts",l={unversionedId:"git/collaboration/collab-03-merge-conflicts",id:"git/collaboration/collab-03-merge-conflicts",title:"Merge conflicts",description:"So far we have only made changes in separate files. However, it can happen that you have made changes to the same file with 2 people, and that a conflict occurs.",source:"@site/docs/git/collaboration/collab-03-merge-conflicts.md",sourceDirName:"git/collaboration",slug:"/git/collaboration/collab-03-merge-conflicts",permalink:"/workflows/git/collaboration/collab-03-merge-conflicts",draft:!1,editUrl:"https://github.com/devinekask/workflows/blob/main/docs/git/collaboration/collab-03-merge-conflicts.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pull",permalink:"/workflows/git/collaboration/collab-02-pull-rebase"},next:{title:"Modules",permalink:"/workflows/category/modules"}},c={},s=[{value:"Visually resolve conflicts",id:"visually-resolve-conflicts",level:2}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"merge-conflicts"},"Merge conflicts"),(0,r.kt)("p",null,"So far we have only made changes in separate files. However, it can happen that you have made changes to the same file with 2 people, and that a conflict occurs."),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," folder, edit the text in ",(0,r.kt)("inlineCode",{parentName:"p"},"hello.txt")," and push it to the remote repository:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'project_1 $ echo "edit in project" > hello.txt\nproject_1 $ git add .\nproject_1 $ git commit -m "changed hello.txt"\n[main f1c4e08] changed hello.txt\n  1 file changed, 1 insertion(+), 1 deletion(-)\n\nproject_1 $ git push\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 12 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 284 bytes | 284.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nremote: Resolving deltas: 100% (1/1), completed with 1 local object.\nTo git@github.com:demouser/hellogit.git\n    8f2400d..f1c4e08  main -> main\n')),(0,r.kt)("p",null,"Also edit the text of hello.txt in the project2 folder"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"project_2 $ echo \"edit in project2\" > hello.txt\nproject_2 $ git add .\nproject_2 $ git commit -m \"changed hello.txt in project2\"\n[main 45b7ea9] chenged hello.txt in project2\n  1 file changed, 1 insertion(+), 1 deletion(-)\n\nproject_2 $ git push\nTo git@github.com:demouser/hellogit\n  ! [rejected]        main -> main (fetch first)\nerror: failed to push some refs to 'git@github.com:demouser/hellogit'\nhint: Updates were rejected because the remote contains work that you do\nhint: not have locally. This is usually caused by another repository pushing\nhint: to the same ref. You may want to first integrate the remote changes\nhint: (e.g., 'git pull ...') before pushing again.\nhint: See the 'Note about fast-forwards' in 'git push --help' for details.\n")),(0,r.kt)("p",null,"We first pull before we can push"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'project_2 $ git pull --rebase\nremote: Enumerating objects: 5, done.\nremote: Counting objects: 100% (5/5), done.\nremote: Compressing objects: 100% (1/1), done.\nremote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0\nUnpacking objects: 100% (3/3), done.\nFrom git@github.com:demouser/hellogit\n    8f2400d..f1c4e08  main       -> origin/main\nFirst, rewinding head to replay your work on top of it...\nApplying: chenged hello.txt in project2\nUsing index info to reconstruct a base tree...\nM hello.txt\nFalling back to patching base and 3-way merge...\nAuto-merging hello.txt\nCONFLICT (content): Merge conflict in hello.txt\nerror: Failed to merge in the changes.\nPatch failed at 0001 chenged hello.txt in project2\nhint: Use \'git am --show-current-patch\' to see the failed patch\nResolve all conflicts manually, mark them as resolved with\n"git add/rm <conflicted_files>", then run "git rebase --continue".\nYou can instead skip this commit: run "git rebase --skip".\n    To abort and get back to the state before "git rebase", run "git rebase --abort".\n')),(0,r.kt)("p",null,"We get a merge conflict, because we changed the same file in both repositories. Now, we need to resolve this conflict before the rebase can continue."),(0,r.kt)("p",null,"Via ",(0,r.kt)("inlineCode",{parentName:"p"},"git status")," you can request a list of the merge conflicts:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'project_2 $ git status\nrebase in progress; onto f1c4e08\nYou are currently rebasing branch \'main\' on \'f1c4e08\'.\n  (fix conflicts and then run "git rebase --continue")\n  (use "git rebase --skip" to skip this patch)\n  (use "git rebase --abort" to check out the original branch)\n\nUnmerged paths:\n  (use "git restore --staged <file>..." to unstage)\n  (use "git add <file>..." to mark resolution)\n\nboth modified:   hello.txt\nno changes added to commit (use "git add" and/or "git commit -a")\n')),(0,r.kt)("p",null,'You will be notified that you are rebasing. At "Unmerged paths" you see the files that are in conflict. You must first resolve the conflict by editing the file before continuing with the rebase.'),(0,r.kt)("p",null,"Open the txt-file in a text editor. You notice that the content from ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"project2")," is present:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"    <<<<<<< HEAD\n    edit in project\n    =======\n    edit in project2\n    >>>>>>> changed hello.txt in project2\n")),(0,r.kt)("p",null,"Adjust the text to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-txt"},"edit in project\nand edit in project2\n")),(0,r.kt)("p",null,"Add this to the rebase action and use the 'continue' flag"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"project_2 $ git add hello.txt\nproject_2 $ git rebase --continue\nApplying: changed hello.txt in project2\n")),(0,r.kt)("p",null,"Now when you execute git status, you will see that you are on the main branch again, and you are 1 commit ahead of the remote:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"project_2 $ git status\nOn branch main\nYour branch is ahead of 'origin/main' by 1 commit.\nnothing to commit (working directory clean)\n")),(0,r.kt)("p",null,"Now you can push again to the remote"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"project_2 $ git push\nCounting objects: 5, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 326 bytes, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo git@github.com:demouser/hellogit\n    7f3b200..920c81f  main -> main\n")),(0,r.kt)("p",null,"Execute ",(0,r.kt)("inlineCode",{parentName:"p"},"git pull")," in the other folder so that both are synced again."),(0,r.kt)("h2",{id:"visually-resolve-conflicts"},"Visually resolve conflicts"),(0,r.kt)("p",null,"If you like a more visual way, you can ",(0,r.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/editor/versioncontrol#_merge-conflicts"},"resolve merge conflicts in VS Code")))}d.isMDXComponent=!0}}]);