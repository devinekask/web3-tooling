"use strict";(self.webpackChunktooling=self.webpackChunktooling||[]).push([[85],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(a),d=r,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return a?n.createElement(h,i(i({ref:t},c),{},{components:a})):n.createElement(h,i({ref:t},c))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3582:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:7},i="Homebrew",l={unversionedId:"homebrew-01-intro",id:"homebrew-01-intro",title:"Homebrew",description:"Our personal computer is full of applications and terminal commands (ls, git, nvm, etc.) that we use every day. For Apps we use the App store or we install then via a download. Terminal commands can be tricky, sometimes they need a specific build step customized to your machine. Homebrew makes this process a breeze. Compare it like npm for your terminal commands.",source:"@site/docs/homebrew-01-intro.md",sourceDirName:".",slug:"/homebrew-01-intro",permalink:"/homebrew-01-intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/homebrew-01-intro.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Vite",permalink:"/vite-01-intro"},next:{title:"Tutorial - Basics",permalink:"/category/tutorial---basics"}},s={},p=[{value:"Installation",id:"installation",level:2},{value:"General usage",id:"general-usage",level:2},{value:"Install a package",id:"install-a-package",level:3},{value:"Search for a package",id:"search-for-a-package",level:3},{value:"Update packages",id:"update-packages",level:3},{value:"Uninstall a package",id:"uninstall-a-package",level:3}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"homebrew"},"Homebrew"),(0,r.kt)("p",null,"Our personal computer is full of applications and terminal commands (",(0,r.kt)("inlineCode",{parentName:"p"},"ls"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"git"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"nvm"),", etc.) that we use every day. For Apps we use the App store or we install then via a download. Terminal commands can be tricky, sometimes they need a specific build step customized to your machine. Homebrew makes this process a breeze. Compare it like ",(0,r.kt)("inlineCode",{parentName:"p"},"npm")," for your terminal commands."),(0,r.kt)("p",null,"Packages are made available through so called 'taps'. A tap is a repository that contains a list of packages. Homebrew has a default tap called ",(0,r.kt)("inlineCode",{parentName:"p"},"homebrew/core")," that contains a lot of packages. But there are also other taps that contain packages. For example the ",(0,r.kt)("inlineCode",{parentName:"p"},"homebrew/cask")," tap contains a lot of applications. (yep, you can use homebrew to install -and manage- applications)"),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://brew.sh/"},"brew.sh")," for the installation instructions. Copy-paste that installation command in your terminal and follow the instructions."),(0,r.kt)("h2",{id:"general-usage"},"General usage"),(0,r.kt)("h3",{id:"install-a-package"},"Install a package"),(0,r.kt)("p",null,"Let us install a package called 'tree' that displays the content of a directory in a visual (tree) structure. We can install it with the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"brew install tree\n")),(0,r.kt)("p",null,"You get some logs in your terminal that shows you the progress of the installation. Once it is done, you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"tree")," command in your terminal. Depending where you are located in the file system, it will display the content of the current directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ tree\n.\n|-- README.md\n`-- hello.txt\n\n0 directories, 2 files\n")),(0,r.kt)("h3",{id:"search-for-a-package"},"Search for a package"),(0,r.kt)("p",null,"If you are not really sure if a certain package is available through Homebrew, you can search for it. You can search ",(0,r.kt)("a",{parentName:"p",href:"https://formulae.brew.sh/formula/"},"using the website")," or via the command line. For instance, if you want to search for a package to convert fonts to woff2 format:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ brew search woff2\n==> Formulae\nwoff2 \u2714\n")),(0,r.kt)("p",null,"It seems like a package ",(0,r.kt)("inlineCode",{parentName:"p"},"woff2")," is available. When you install it, you will have ",(0,r.kt)("inlineCode",{parentName:"p"},"woff2_compress")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"woff2_decompress")," available in your terminal."),(0,r.kt)("h3",{id:"update-packages"},"Update packages"),(0,r.kt)("p",null,"You can run ",(0,r.kt)("inlineCode",{parentName:"p"},"brew update")," to update the ",(0,r.kt)("strong",{parentName:"p"},"registry")," of packages. This will not update the packages themselves. Therefore you have to run ",(0,r.kt)("inlineCode",{parentName:"p"},"brew upgrade"),"."),(0,r.kt)("h3",{id:"uninstall-a-package"},"Uninstall a package"),(0,r.kt)("p",null,"To uninstall a package, you can run ",(0,r.kt)("inlineCode",{parentName:"p"},"brew uninstall <package-name>"),"."),(0,r.kt)("p",null,"Happy brewing!"))}u.isMDXComponent=!0}}]);